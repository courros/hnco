{
    "files": {
        "header": "hnco-options.hh",
        "source": "hnco-options.cc",
        "exec": "hnco"
    },

    "code": {
        "cppdefine": "HNCO_APP_HNCO_OPTIONS_H",
        "namespace": [ "hnco", "app" ],
        "classname": "HncoOptions"
    },

    "description": "HNCO (in Hypercubo Nigrae Capsulae Optimum) -- optimization of black box functions defined on bit vectors",

    "version": "0.25",

    "sections": [

        {
            "id": "gen",
            "title": "General",
            "fold": false
        },

        {
            "id": "fn",
            "title": "Functions",
            "fold": true
        },

        {
            "id": "fp",
            "title": "Function parser",
            "fold": true
        },

        {
            "id": "rep",
            "title": "Representations",
            "fold": true
        },

        {
            "id": "mod",
            "title": "Function Modifiers",
            "fold": true
        },

        {
            "id": "ctrl",
            "title": "Function Controllers",
            "fold": true
        },

        {
            "id": "pn",
            "title": "Prior Noise",
            "fold": true
        },

        {
            "id": "map",
            "title": "Maps",
            "fold": true
        },

        {
            "id": "alg",
            "title": "Algorithms",
            "fold": true
        },

        {
            "id": "ls",
            "title": "Local Search",
            "fold": true
        },

        {
            "id": "sa",
            "title": "Simulated Annealing",
            "fold": true
        },

        {
            "id": "ea",
            "title": "Evolutionary Algorithms",
            "fold": true
        },

        {
            "id": "eda",
            "title": "Estimation of Distribution Algorithms",
            "fold": true
        },

        {
            "id": "hea",
            "title": "Herding Evolutionary Algorithms",
            "fold": true
        },

        {
            "id": "bm",
            "title": "Boltzmann Machine PBIL",
            "fold": true
        }

    ],

    "order": [ "gen", "fn", "fp", "rep", "mod", "ctrl", "pn", "map", "alg", "ls", "sa", "ea", "eda", "hea", "bm" ],

    "flags": {

        "print_default_parameters":
        {
            "description": "Print the default parameters and exit",
            "section": "gen"
        },

        "print_parameters":
        {
            "description": "Print the parameters",
            "section": "gen"
        },

        "print_results":
        {
            "description": "Print results",
            "section": "gen"
        },

        "save_results":
        {
            "description": "Save the results in a file",
            "section": "gen"
        },

        "print_solution":
        {
            "description": "Print the solution",
            "section": "gen"
        },

        "save_solution":
        {
            "description": "Save the solution in a file",
            "section": "gen"
        },

        "concrete_solution":
        {
            "description": "Print or save the solution in the domain of the concrete function",
            "section": "gen"
        },

        "load_solution":
        {
            "description": "Load a solution from a file",
            "section": "gen"
        },

        "print_description":
        {
            "description": "Print a description of the solution",
            "section": "gen"
        },

        "save_description":
        {
            "description": "Save the description of the solution in a file",
            "section": "gen"
        },

        "record_total_time":
        {
            "description": "Record total time",
            "section": "gen"
        },


        "fn_has_known_maximum":
        {
            "description": "Check whether the function has a known maximum",
            "section": "fn"
        },

        "fn_get_maximum":
        {
            "description": "If the maximum is known then print it and exit with status 0 else exit with status 1",
            "section": "fn"
        },

        "fn_get_bv_size":
        {
            "description": "Print the size of bit vectors",
            "section": "fn"
        },

        "fn_provides_incremental_evaluation":
        {
            "description": "Check whether the function provides incremental evaluation",
            "section": "fn"
        },

        "fn_walsh_transform":
        {
            "description": "Compute the Walsh transform of the function",
            "section": "fn"
        },

        "fn_display":
        {
            "description": "Display the function and exit",
            "section": "fn"
        },


        "log_improvement":
        {
            "description": "Log improvement",
            "section": "ctrl"
        },

        "record_evaluation_time":
        {
            "description": "Record evaluation time",
            "section": "ctrl"
        },

        "stop_on_maximum":
        {
            "description": "Stop on maximum",
            "section": "ctrl"
        },

        "stop_on_target":
        {
            "description": "Stop on target",
            "section": "ctrl"
        },

        "cache":
        {
            "description": "Cache function evaluations",
            "section": "ctrl"
        },

        "cache_budget":
        {
            "description": "Set cache on budget",
            "section": "ctrl"
        },


        "negation":
        {
            "description": "Negation (hence minimization) of the function",
            "section": "mod"
        },

        "additive_gaussian_noise":
        {
            "description": "Additive Gaussian noise",
            "section": "mod"
        },

        "parsed_modifier":
        {
            "description": "Parsed modifier",
            "section": "mod"
        },


        "prior_noise":
        {
            "description": "Prior noise",
            "section": "pn"
        },

        "pn_allow_no_mutation":
        {
            "description": "Allow no mutation with standard bit mutation",
            "section": "pn"
        },


        "map_random":
        {
            "description": "Sample a random map",
            "section": "map"
        },

        "map_surjective":
        {
            "description": "Ensure that the sampled linear or affine map is surjective",
            "section": "map"
        },

        "map_display":
        {
            "description": "Display the map and exit",
            "section": "map"
        },

        "restart":
        {
            "description": "Restart any algorithm an indefinite number of times",
            "section": "alg"
        },

        "incremental_evaluation":
        {
            "description": "Incremental evaluation",
            "section": "ls"
        },

        "rls_strict":
        {
            "description": "Strict (>) random local search",
            "section": "ls"
        },

        "rw_log_value":
        {
            "description": "Log bit vector value during random walk",
            "section": "ls"
        },

        "ea_allow_no_mutation":
        {
            "description": "Allow no mutation with standard bit mutation",
            "section": "ea"
        },

        "ea_log_mutation_rate":
        {
            "description": "Log mutation rate",
            "section": "ea"
        },

        "ea_it_log_center_fitness":
        {
            "description": "Log center fitness",
            "section": "ea"
        },

        "pv_log_pv":
        {
            "description": "Log probability vector",
            "section": "eda"
        },

        "pv_log_entropy":
        {
            "description": "Log entropy of probability vector",
            "section": "eda"
        },

        "mmas_strict":
        {
            "description": "Strict (>) max-min ant system",
            "section": "eda"
        },

        "hea_randomize_bit_order":
        {
            "description": "Randomize bit order",
            "section": "hea"
        },

        "hea_log_herding_error":
        {
            "description": "Log herding error (moment discrepancy)",
            "section": "hea"
        },

        "hea_log_target_norm":
        {
            "description": "Log target 2-norm (distance to uniform moment)",
            "section": "hea"
        },

        "hea_log_delta_norm":
        {
            "description": "Log delta (moment increment) 2-norm",
            "section": "hea"
        },

        "hea_log_target":
        {
            "description": "Log target moment as a symmetric matrix",
            "section": "hea"
        },

        "hea_bound_moment":
        {
            "description": "Bound moment after update",
            "section": "hea"
        },

        "bm_negative_positive_selection":
        {
            "description": "Negative and positive selection",
            "section": "bm"
        },

        "bm_log_norm_infinite":
        {
            "description": "Log infinite norm of the parameters",
            "section": "bm"
        },

        "bm_log_norm_1":
        {
            "description": "Log 1-norm of the parameters",
            "section": "bm"
        }

    },

    "parameters": {

        "seed":
        {
            "type": "unsigned",
            "description": "Seed for the random number generator",
            "section": "gen"
        },

        "num_threads":
        {
            "type": "int",
            "default": 1,
            "description": "Number of threads",
            "section": "gen"
        },

        "results_path":
        {
            "type": "string",
            "default": "results.json",
            "description": "Path of the results file",
            "section": "gen"
        },

        "solution_path":
        {
            "type": "string",
            "default": "solution.txt",
            "description": "Path of the solution file",
            "section": "gen"
        },

        "description_path":
        {
            "type": "string",
            "default": "description.txt",
            "description": "Path of the description file",
            "section": "gen"
        },


        "function":
        {
            "optchar": "F",
            "type": "int",
            "default": 0,
            "description": "Type of function",
            "section": "fn",
            "values":
            [

                {
                    "value": 0,
                    "description": "OneMax"
                },

                {
                    "value": 1,
                    "description": "Linear function"
                },

                {
                    "value": 5,
                    "description": "BinVal (linear function with weights in geometric progression 1, 2, 4...)"
                },

                {
                    "value": 10,
                    "description": "Leading ones"
                },

                {
                    "value": 11,
                    "description": "Ridge"
                },

                {
                    "value": 20,
                    "description": "Needle"
                },

                {
                    "value": 30,
                    "description": "Jump"
                },

                {
                    "value": 31,
                    "description": "Deceptive jump (aka Jump_k)"
                },

                {
                    "value": 40,
                    "description": "Four peaks"
                },

                {
                    "value": 41,
                    "description": "Six peaks"
                },

                {
                    "value": 50,
                    "description": "Quadratic unconstrained binary optimization (Qubo)"
                },

                {
                    "value": 60,
                    "description": "NK landscape"
                },

                {
                    "value": 70,
                    "description": "Max-SAT"
                },

                {
                    "value": 71,
                    "description": "Max not-all-equal 3SAT"
                },

                {
                    "value": 80,
                    "description": "Low autocorrelation binary sequence"
                },

                {
                    "value": 81,
                    "description": "Low autocorrelation binary sequence merit factor"
                },

                {
                    "value": 90,
                    "description": "Equal products"
                },

                {
                    "value": 91,
                    "description": "Partition"
                },

                {
                    "value": 100,
                    "description": "Summation cancellation"
                },

                {
                    "value": 101,
                    "description": "Summation cancellation with sinus"
                },

                {
                    "value": 110,
                    "description": "Trap"
                },

                {
                    "value": 120,
                    "description": "Hierarchical if and only if (Hiff)"
                },

                {
                    "value": 130,
                    "description": "Plateau"
                },

                {
                    "value": 140,
                    "description": "Long path"
                },

                {
                    "value": 150,
                    "description": "Factorization"
                },

                {
                    "value": 160,
                    "description": "Walsh expansion"
                },

                {
                    "value": 161,
                    "description": "Walsh expansion of degree 1"
                },

                {
                    "value": 162,
                    "description": "Walsh expansion of degree 2"
                },

                {
                    "value": 171,
                    "description": "Nearest neighbor Ising model in one dimension"
                },

                {
                    "value": 172,
                    "description": "Nearest neighbor Ising model in two dimensions"
                },

                {
                    "value": 180,
                    "description": "Real multivariate function (rep: bv -> double, parser: [double] -> double)"
                },

                {
                    "value": 181,
                    "description": "Integer multivariate function (rep: bv -> long, parser: [long] -> long, cast to double)"
                },

                {
                    "value": 182,
                    "description": "Complex multivariate function (rep: bv -> complex, parser: [complex] -> complex, square of the magnitude)"
                },

                {
                    "value": 183,
                    "description": "Integer multivariate function (rep: bv -> int, cast to double, parser: [double] -> double)"
                },

                {
                    "value": 184,
                    "description": "Mixed-representation multivariate function (rep: bv -> long, double, or set, parser: [double] -> double)"
                },

                {
                    "value": 190,
                    "description": "Sudoku"
                },

                {
                    "value": 200,
                    "description": "Travelling salesman problem"
                },

                {
                    "value": 1000,
                    "description": "Plugin"
                },

                {
                    "value": 1100,
                    "description": "Python function (embedded interpreter)"
                }

            ]

        },

        "bv_size":
        {
            "optchar": "s",
            "type": "int",
            "default": 100,
            "description": "Size of bit vectors",
            "section": "fn"
        },

        "path":
        {
            "optchar": "p",
            "type": "string",
            "default": "function.txt",
            "description": "Path of the function file",
            "section": "fn"
        },

        "fn_threshold":
        {
            "optchar": "t",
            "type": "int",
            "default": 10,
            "description": "Threshold (in bits) for Jump, Four Peaks, and Six Peaks",
            "section": "fn"
        },

        "fn_num_traps":
        {
            "type": "int",
            "default": 10,
            "description": "Number of traps",
            "section": "fn"
        },

        "fn_prefix_length":
        {
            "type": "int",
            "default": 2,
            "description": "Prefix length for long path",
            "section": "fn"
        },

        "fn_name":
        {
            "type": "string",
            "description": "Name of the function in the dynamic library",
            "section": "fn"
        },

        "fp_expression":
        {
            "type": "string",
            "description": "Mathematical expression",
            "section": "fp"
        },

        "fp_representations_source":
        {
            "type": "int",
            "default": 0,
            "description": "Source for the representations",
            "section": "fp",
            "values":
            [

                {
                    "value": 0,
                    "description": "Command-line"
                },

                {
                    "value": 1,
                    "description": "Representations file"
                }

            ]

        },

        "fp_representations_path":
        {
            "type": "string",
            "default": "representations.txt",
            "description": "Path of the representations file",
            "section": "fp"
        },

        "fp_representations":
        {
            "type": "string",
            "description": "Representations. Example: \\\"x: double(0, 1); y: double(0, 1, precision = 1e-3); z: double(0, 1, size = 8); u: int(-10, 10); v: long(-100, 100); w: set(1.1, 2.2, 3.3)\\\"",
            "section": "fp"
        },

        "fp_default_int_rep":
        {
            "type": "string",
            "default": "int(1, 100)",
            "description": "Default representation for int",
            "section": "fp"
        },

        "fp_default_long_rep":
        {
            "type": "string",
            "default": "long(1, 100)",
            "description": "Default representation for long",
            "section": "fp"
        },

        "fp_default_double_rep":
        {
            "type": "string",
            "default": "double(0, 1, precision = 1e-3)",
            "description": "Default representation for double",
            "section": "fp"
        },

        "fp_default_double_precision":
        {
            "type": "double",
            "description": "Default precision of double representations",
            "section": "fp"
        },

        "fp_default_double_size":
        {
            "type": "int",
            "description": "Default size of double representations",
            "section": "fp"
        },

        "rep_categorical_representation":
        {
            "type": "int",
            "default": 0,
            "description": "Categorical representation",
            "section": "rep",
            "values":
            [

                {
                    "value": 0,
                    "description": "Integer"
                },

                {
                    "value": 1,
                    "description": "Linear"
                }

            ]

        },

        "rep_num_additional_bits":
        {
            "type": "int",
            "default": 2,
            "description": "Number of additional bits per element for permutation representation",
            "section": "rep"
        },

        "budget":
        {
            "optchar": "b",
            "type": "int",
            "default": 10000,
            "description": "Number of allowed function evaluations (<= 0 means indefinite)",
            "section": "ctrl"
        },

        "target":
        {
            "type": "double",
            "default": 100.0,
            "description": "Target",
            "section": "ctrl"
        },

        "noise_stddev":
        {
            "type": "double",
            "default": 1.0,
            "description": "Noise standard deviation",
            "section": "mod"
        },

        "expression":
        {
            "type": "string",
            "default": "x",
            "description": "Expression of the variable x",
            "section": "mod"
        },

        "pn_mutation_rate":
        {
            "type": "double",
            "description": "Mutation rate",
            "section": "pn"
        },

        "pn_radius":
        {
            "type": "int",
            "default": 2,
            "description": "Radius of Hamming ball or sphere",
            "section": "pn"
        },

        "pn_neighborhood":
        {
            "type": "int",
            "default": 0,
            "description": "Type of neighborhood",
            "section": "pn",
            "values":
            [

                {
                    "value": 0,
                    "description": "Single bit flip"
                },

                {
                    "value": 1,
                    "description": "Standard bit mutation"
                },

                {
                    "value": 2,
                    "description": "Hamming ball"
                },

                {
                    "value": 3,
                    "description": "Hamming sphere"
                }

            ]

        },


        "map":
        {
            "optchar": "M",
            "type": "int",
            "default": 0,
            "description": "Type of map",
            "section": "map",
            "values":
            [

                {
                    "value": 0,
                    "description": "None"
                },

                {
                    "value": 1,
                    "description": "Translation"
                },

                {
                    "value": 2,
                    "description": "Permutation"
                },

                {
                    "value": 3,
                    "description": "Composition of permutation and translation"
                },

                {
                    "value": 4,
                    "description": "Linear"
                },

                {
                    "value": 5,
                    "description": "Affine"
                },

                {
                    "value": 6,
                    "description": "Affine (transvection sequence)"
                }

            ]

        },

        "map_input_size":
        {
            "type": "int",
            "default": 100,
            "description": "Input size of linear and affine maps",
            "section": "map"
        },

        "map_path":
        {
            "type": "string",
            "default": "map.txt",
            "description": "Path of the map file",
            "section": "map"
        },

        "map_ts_sampling_mode":
        {
            "type": "int",
            "default": 0,
            "description": "Transvection sequence sampling mode",
            "section": "map",
            "values":
            [

                {
                    "value": 0,
                    "description": "Unconstrained"
                },

                {
                    "value": 1,
                    "description": "Commuting transvections"
                },

                {
                    "value": 2,
                    "description": "Unique source"
                },

                {
                    "value": 3,
                    "description": "Unique destination"
                },

                {
                    "value": 4,
                    "description": "Disjoint transvections"
                },

                {
                    "value": 5,
                    "description": "Non commuting transvections"
                }

            ]

        },

        "map_ts_length":
        {
            "type": "int",
            "default": 10,
            "description": "Transvection sequence length",
            "section": "map"
        },

        "algorithm":
        {
            "optchar": "A",
            "type": "int",
            "default": 100,
            "description": "Type of algorithm",
            "section": "alg",
            "values":
            [

                {
                    "value": 0,
                    "description": "Complete search"
                },

                {
                    "value": 10,
                    "description": "Random search"
                },

                {
                    "value": 20,
                    "description": "Random walk"
                },

                {
                    "value": 30,
                    "description": "Human, so you can try by yourself"
                },

                {
                    "value": 100,
                    "description": "Random local search"
                },

                {
                    "value": 150,
                    "description": "Steepest ascent hill climbing"
                },

                {
                    "value": 160,
                    "description": "First ascent hill climbing"
                },

                {
                    "value": 200,
                    "description": "Simulated annealing"
                },

                {
                    "value": 300,
                    "description": "(1+1) evolutionary algorithm (EA)"
                },

                {
                    "value": 301,
                    "description": "Self-adjusting (1+1) evolutionary algorithm (EA)"
                },

                {
                    "value": 310,
                    "description": "(mu+lambda) evolutionary algorithm (EA)"
                },

                {
                    "value": 320,
                    "description": "(mu,lambda) evolutionary algorithm (EA)"
                },

                {
                    "value": 330,
                    "description": "Two-rate (1+lambda) evolutionary algorithm (EA)"
                },

                {
                    "value": 340,
                    "description": "Information-theoretic evolutionary algorithm (EA)"
                },

                {
                    "value": 400,
                    "description": "Genetic algorithm (GA)"
                },

                {
                    "value": 450,
                    "description": "(1+(lambda,lambda)) genetic algorithm (GA)"
                },

                {
                    "value": 500,
                    "description": "Population-based incremental learning (PBIL)"
                },

                {
                    "value": 501,
                    "description": "PBIL with negative and positive selection"
                },

                {
                    "value": 600,
                    "description": "Univariate marginal distribution algorithm (UMDA)"
                },

                {
                    "value": 700,
                    "description": "Compact genetic algorithm (cGA)"
                },

                {
                    "value": 800,
                    "description": "Max-min ant system (MMAS)"
                },

                {
                    "value": 900,
                    "description": "Herding evolutionary algorithm (HEA) with symmetric Walsh moment"
                },

                {
                    "value": 901,
                    "description": "Herding evolutionary algorithm (HEA) with lower triangular Walsh moment"
                },

                {
                    "value": 1000,
                    "description": "Boltzmann machine PBIL with symmetric Walsh moment"
                },

                {
                    "value": 1001,
                    "description": "Boltzmann machine PBIL with lower triangular Walsh moment"
                },

                {
                    "value": 1100,
                    "description": "Mutual information maximizing input clustering (MIMIC)"
                },

                {
                    "value": 1110,
                    "description": "Hierarchical Bayesian optimization algorithm (hBOA)"
                },

                {
                    "value": 1200,
                    "description": "Linkage tree genetic algorithm (LTGA)"
                },

                {
                    "value": 1250,
                    "description": "GOMEA"
                },

                {
                    "value": 1300,
                    "description": "Parameter-less population pyramid (P3)"
                }

            ]

        },

        "num_iterations":
        {
            "optchar": "i",
            "type": "int",
            "default": 0,
            "description": "Number of iterations (<= 0 means indefinite)",
            "section": "alg"
        },

        "neighborhood":
        {
            "optchar": "N",
            "type": "int",
            "default": 0,
            "description": "Type of neighborhood",
            "section": "ls",
            "values":
            [

                {
                    "value": 0,
                    "description": "Single bit flip"
                },

                {
                    "value": 1,
                    "description": "Standard bit mutation"
                },

                {
                    "value": 2,
                    "description": "Hamming ball"
                },

                {
                    "value": 3,
                    "description": "Hamming sphere"
                }

            ]

        },

        "neighborhood_iterator":
        {
            "type": "int",
            "default": 0,
            "description": "Type of neighborhood iterator",
            "section": "ls",
            "values":
            [

                {
                    "value": 0,
                    "description": "Single bit flip iterator"
                },

                {
                    "value": 1,
                    "description": "Hamming sphere iterator"
                }

            ]

        },

        "rls_patience":
        {
            "type": "int",
            "default": 50,
            "description": "Number of consecutive rejected moves before ending the search (<= 0 means infinite)",
            "section": "ls"
        },

        "radius":
        {
            "type": "int",
            "default": 2,
            "description": "Radius of Hamming ball or sphere",
            "section": "ls"
        },

        "sa_num_transitions":
        {
            "type": "int",
            "default": 50,
            "description": "Number of accepted transitions before annealing",
            "section": "sa"
        },

        "sa_num_trials":
        {
            "type": "int",
            "default": 100,
            "description": "Number of trials to estimate initial inverse temperature",
            "section": "sa"
        },

        "sa_initial_acceptance_probability":
        {
            "type": "double",
            "default": 0.6,
            "description": "Initial acceptance probability",
            "section": "sa"
        },

        "sa_beta_ratio":
        {
            "type": "double",
            "default": 1.2,
            "description": "Ratio for beta or inverse temperature",
            "section": "sa"
        },

        "ea_mutation_rate":
        {
            "optchar": "m",
            "type": "double",
            "description": "Mutation rate (fixed or initial value)",
            "section": "ea"
        },

        "ea_mutation_rate_min":
        {
            "type": "double",
            "description": "Minimum mutation rate",
            "section": "ea"
        },

        "ea_mutation_rate_max":
        {
            "type": "double",
            "default": 0.5,
            "description": "Maximum mutation rate",
            "section": "ea"
        },

        "ea_update_strength":
        {
            "type": "double",
            "default": 1.01,
            "description": "Update strength for self-adjusting mutation rate",
            "section": "ea"
        },

        "ea_success_ratio":
        {
            "type": "double",
            "default": 4,
            "description": "Success rate for for self-adjusting mutation rate",
            "section": "ea"
        },

        "ea_mu":
        {
            "type": "int",
            "default": 10,
            "description": "Parent population size",
            "section": "ea"
        },

        "ea_lambda":
        {
            "type": "int",
            "default": 100,
            "description": "Offspring population size",
            "section": "ea"
        },

        "ea_tournament_size":
        {
            "type": "int",
            "default": 2,
            "description": "Tournament size",
            "section": "ea"
        },

        "ea_crossover_probability":
        {
            "type": "double",
            "default": 0.5,
            "description": "Crossover probability",
            "section": "ea"
        },

        "ea_crossover_bias":
        {
            "type": "double",
            "default": 0.5,
            "description": "Crossover bias",
            "section": "ea"
        },

        "ea_it_replacement":
        {
            "type": "int",
            "default": 0,
            "description": "Selection for replacement in it-EA",
            "section": "ea",
            "values":
            [

                {
                    "value": 0,
                    "description": "Elitist replacement (eit-EA)"
                },

                {
                    "value": 1,
                    "description": "Non elitist replacement (neit-EA)"
                },

                {
                    "value": 2,
                    "description": "Maximum likelihood update (it-EA)"
                },

                {
                    "value": 3,
                    "description": "Incremental maximum likelihood update (it1-EA)"
                },

                {
                    "value": 4,
                    "description": "No replacement (static search)"
                }

            ]
        },

        "ea_it_initial_hamming_weight":
        {
            "type": "int",
            "default": 0,
            "description": "Initial Hamming weight",
            "section": "ea"
        },

        "population_size":
        {
            "optchar": "x",
            "type": "int",
            "default": 10,
            "description": "Population size",
            "section": "eda"
        },

        "selection_size":
        {
            "optchar": "y",
            "type": "int",
            "default": 1,
            "description": "Selection size (number of selected individuals)",
            "section": "eda"
        },

        "learning_rate":
        {
            "optchar": "l",
            "type": "double",
            "default": 1e-3,
            "description": "Learning rate",
            "section": "eda"
        },

        "pv_log_num_components":
        {
            "type": "int",
            "default": 5,
            "description": "Number of probability vector components to log",
            "section": "eda"
        },

        "hea_reset_period":
        {
            "type": "int",
            "default": 0,
            "description": "Reset period (<= 0 means no reset)",
            "section": "hea"
        },

        "bm_num_gs_steps":
        {
            "type": "int",
            "default": 100,
            "description": "Number of Gibbs sampler steps per bit vector",
            "section": "bm"
        },

        "bm_num_gs_cycles":
        {
            "type": "int",
            "default": 1,
            "description": "Number of Gibbs sampler cycles per bit vector",
            "section": "bm"
        },

        "bm_sampling_mode":
        {
            "type": "int",
            "default": 1,
            "description": "Sampling mode for the Boltzmann machine",
            "section": "bm",
            "values":
            [

                {
                    "value": 0,
                    "description": "Asynchronous sampling"
                },

                {
                    "value": 1,
                    "description": "Asynchronous sampling with full scan"
                },

                {
                    "value": 2,
                    "description": "Synchronous sampling"
                }

            ]

        },

        "bm_reset_mode":
        {
            "type": "int",
            "default": 1,
            "description": "Markov chain reset mode",
            "section": "bm",
            "values":
            [

                {
                    "value": 0,
                    "description": "No reset"
                },

                {
                    "value": 1,
                    "description": "Reset the Markov chain at the beginning of each iteration"
                },

                {
                    "value": 2,
                    "description": "Reset the Markov chain before sampling each bit vector"
                }

            ]

        }

    }

}
