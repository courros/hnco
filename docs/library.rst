=========
 Library
=========

The documentation of the library is generated by doxygen and can be
found `here <doxygen/index.html>`_

You might want to locally generate the html documentation as it is
neither version controlled nor distributed. However the pdf
documentation ``refman.pdf`` in the directory ``docs/local/latex/`` is
version controlled and distributed.

The library declares the top-level namespace ``hnco`` and the
following nested namespaces:

- ``hnco::algorithm``
- ``hnco::app``
- ``hnco::exception``
- ``hnco::function``
- ``hnco::logging``
- ``hnco::map``
- ``hnco::multiobjective``
- ``hnco::neighborhood``
- ``hnco::random``
- ``hnco::representation``

The library is organized around the following base classes:

- ``Algorithm`` (single and multi)
- ``Function`` (single and multi)
- ``Iterator``
- ``Map``
- ``Neighborhood``
- ``Population`` (single and multi)

Bit vectors are implemented as ``std::vector<uint8_t>``.

The library offers basic support for linear algebra on bit vectors.

The source files in ``app/`` and ``lib/hnco/app/`` provide a starting
point to learn how to use the library in C++.

----------
Algorithms
----------

Here is the list of currently available algorithms:

- Complete search
- Random search
- Random walk
- Human
- Random local search (strict and non strict)
- Steepest ascent hill climbing
- First ascent hill climbing
- Simulated annealing
- (1+1) evolutionary algorithm
- Self-adjusting (1+1) evolutionary algorithm
- (mu+lambda) evolutionary algorithm
- (mu,lambda) evolutionary algorithm
- Two-rate (1+lambda) evolutionary algorithm
- Information-theoretic evolutionary algorithm
- Genetic algorithm
- (1+(lambda,lambda)) genetic algorithm
- Population-based incremental learning
- PBIL with positive and negative selection
- Univariate marginal distribution algorithm
- Compact genetic algorithm
- Max-min ant system (strict and non strict)
- Herding evolutionary algorithm
- Boltzmann machine PBIL
- Mutual information maximizing input clustering
- Hierarchical Bayesian Optimization Algorithm
- Linkage Tree Genetic Algorithm
- Gene-pool Optimal Mixing Evolutionary Algorithm
- Parameter-less Population Pyramid
- NSGA-II (multiobjective)

For population-based algorithms, bit vectors in a population (class
``hnco::algorithm::Population``) can be evaluated in parallel as the
library uses OpenMP. It should be noted that only sufficiently complex
functions should lead to significant speed-up.

---------
Functions
---------

The library provides user-defined functions (at runtime) and test
functions (OneMax etc.).

User-defined functions:

- Multivariate function (representations for int, long, double, or
  complex)
- Mixed-representation multivariate function (representations for
  long, double, and finite set of double values)
- Plugin (load any C function in a dynamic library)
- Python function (embedded interpreter)

Test functions (``ffgen`` means that instances can be generated by
``ffgen``):

- OneMax
- Linear function (``ffgen``)
- BinVal
- Leading ones
- Ridge
- Needle
- Jump
- Deceptive jump
- Four peaks
- Six peaks
- Quadratic unconstrained binary optimization (qubo input file format)
- Nk landscape (``ffgen``)
- Max-SAT (``ffgen``, dimacs cnf input file format)
- Max not-all-equal 3SAT (``ffgen``, dimacs cnf input file format)
- Low autocorrelation binary sequence
- Low autocorrelation binary sequence merit factor
- Equal products (``ffgen``)
- Partition (``ffgen``)
- Summation cancellation
- Summation cancellation with sinus
- Trap
- Hierarchical if and only if
- Plateau
- Long path
- Factorization
- Walsh expansion (``ffgen``)
- Walsh expansion of degree 1 (``ffgen``)
- Walsh expansion of degree 2 (``ffgen``)
- Nearest neighbor Ising model in one dimension (``ffgen``)
- Nearest neighbor Ising model in two dimensions (``ffgen``)
- Sudoku
- Travelling salesman problem

-------------------
Function decorators
-------------------

Function controllers:

- Cache
- CallCounter
- OnBudgetFunction
- ProgressTracker
- StopOnMaximum
- StopOnTarget

Function modifiers:

- AdditiveGaussianNoise
- FunctionMapComposition
- OppositeFunction
- PriorNoise
- ParsedModifier

-------------
Neighborhoods
-------------

Random local search algorithms, including simulated algorithm, can use
the following neighborhoods:

- Single bit flip
- Standard bit mutation
- Hamming ball
- Hamming sphere

Every neighborhood can act as a mutation operator.

Steepest ascent hill climbing can use the following neighborhood
iterators:

- Single bit flip iterator
- Hamming sphere iterator

--------------
Python binding
--------------

There is a python binding for the library made with pybind11. Most of
the library is available through the ``hnco`` module and its
submodules which are named after the hnco C++ namespaces.

It is also possible to define a (fitness) function in python and
maximize it from hnco without recompilation.

The source file of the binding is ``bindings/hnco.cc``.

Examples can be found under ``bindings/examples/``.

-----------
Limitations
-----------

The library only handles fixed-sized bit vectors by design. However,
representations somehow mitigate this limitation.

The library should include more algorithms, in particular evolutionary
algorithms, and more functions from standard benchmarks. These are
considered for future releases.
