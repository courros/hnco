=========
 Library
=========

The documentation of the library is generated by doxygen and can be
found `here <doxygen/index.html>`_

The library declares the top-level namespace ``hnco`` and nested
namespaces ``hnco::algorithm``, ``hnco::app``, ``hnco::exception``,
``hnco::function``, ``hnco::logging``, ``hnco::map``,
``hnco::neighborhood``, ``hnco::random``, and
``hnco::representation``.

The library is organized around the following base classes: ``Map``,
``Function``, ``Algorithm``, ``Neighborhood``, ``Iterator``,
``Population``.

Classes are documented with Doxygen. You might want to generate the
html documentation as it is neither version controlled nor
distributed. However the pdf documentation
``docs/local/latex/refman.pdf`` is version controlled and distributed.

The source files in ``app/`` and ``lib/hnco/app/`` provide a starting
point to learn how to use the library.

Bit vectors are implemented as ``std::vector<uint8_t>``.

The library offers basic support for linear algebra on bit vectors.

----------
Algorithms
----------

Here is the list of currently available algorithms:

- Complete search
- Random search
- Random walk
- Human
- Random local search (strict and non strict)
- Steepest ascent hill climbing
- First ascent hill climbing
- Simulated annealing
- (1+1) evolutionary algorithm
- Self-adjusting (1+1) evolutionary algorithm
- (mu+lambda) evolutionary algorithm
- (mu,lambda) evolutionary algorithm
- Genetic algorithm
- (1+(lambda,lambda)) genetic algorithm
- Population-based incremental learning
- PBIL with positive and negative selection
- Univariate marginal distribution algorithm
- Compact genetic algorithm
- Max-min ant system (strict and non strict)
- Herding evolutionary algorithm
- Boltzmann machine PBIL
- Mutual information maximizing input clustering
- Hierarchical Bayesian Optimization Algorithm
- Linkage Tree Genetic Algorithm
- Parameter-less Population Pyramid

For population-based algorithms, bit vectors in a population (class
``hnco::algorithm::Population``) can be evaluated in parallel as the
library uses OpenMP. It should be noted that only sufficiently complex
functions should lead to significant speed-up.

---------
Functions
---------

Here is the list of currently available functions (``ffgen`` means that
instances can be generated by ``ffgen``).

- OneMax
- Linear function (``ffgen``)
- BinVal
- Leading ones
- Ridge
- Needle
- Jump
- Deceptive jump
- Four peaks
- Six peaks
- Quadratic unconstrained binary optimization (qubo input file format)
- Nk landscape (``ffgen``)
- Max-SAT (``ffgen``, dimacs cnf input file format)
- Max not-all-equal 3SAT (``ffgen``, dimacs cnf input file format)
- Low autocorrelation binary sequence
- Low autocorrelation binary sequence merit factor
- Equal products (``ffgen``)
- Partition (``ffgen``)
- Summation cancellation
- Summation cancellation with sinus
- Trap
- Hierarchical if and only if
- Plateau
- Long path
- Factorization
- Walsh expansion (``ffgen``)
- Walsh expansion of degree 1 (``ffgen``)
- Walsh expansion of degree 2 (``ffgen``)
- Nearest neighbor Ising model in one dimension (``ffgen``)
- Nearest neighbor Ising model in two dimensions (``ffgen``)
- Real multivariate function
- Integer multivariate function
- Complex multivariate function (squared magnitude of)
- Sudoku
- Travelling salesman problem
- Plugin (load any C function)
- Python function (embedded interpreter)

-------------------
Function decorators
-------------------

Available function controllers: Cache, CallCounter, OnBudgetFunction,
ProgressTracker, StopOnMaximum, StopOnTarget.

Available function modifiers: AdditiveGaussianNoise,
FunctionMapComposition, Negation, PriorNoise, ParsedModifier.

-------------
Neighborhoods
-------------

Random local search algorithms, including simulated algorithm, can use
the following neighborhoods:

- Single bit flip
- Bernoulli process
- Hamming ball
- Hamming sphere

Every neighborhood can act as a mutation operator.

Steepest ascent hill climbing can use the following neighborhood
iterators:

- Single bit flip iterator
- Hamming sphere iterator

-----------
Limitations
-----------

The library only handles fixed-sized bit vectors by design. However,
representations somehow mitigate this limitation.

The library should include more algorithms, in particular evolutionary
algorithms, and more functions from standard benchmarks. These are
considered for future releases.
